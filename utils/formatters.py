from typing import List, Dict, Any
from datetime import datetime

def format_favorites(favorites: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    if not favorites:
        return "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
    
    formatted = "‚≠ê **–í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:**\n\n"
    
    for i, favorite in enumerate(favorites, 1):
        type_emoji = {
            "catfact": "üê±",
            "joke": "üòÑ", 
            "randomfact": "üé≤"
        }.get(favorite["type"], "üìù")
        
        content = favorite["content"]
        if len(content) > 100:
            content = content[:100] + "..."
        
        added_date = datetime.fromisoformat(favorite["added_at"]).strftime("%d.%m.%Y")
        
        formatted += f"{i}. {type_emoji} {content}\n"
        formatted += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_date}\n\n"
    
    return formatted

def format_history(history: List[Dict[str, Any]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if not history:
        return "‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"
    
    formatted = "üìã **–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è:**\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
    recent_history = history[-10:] if len(history) > 10 else history
    
    for item in reversed(recent_history):
        command_emoji = {
            "catfact": "üê±",
            "joke": "üòÑ", 
            "randomfact": "üé≤",
            "prediction": "üîÆ"
        }.get(item["command"], "üìù")
        
        content = item["content"]
        if len(content) > 80:
            content = content[:80] + "..."
        
        timestamp = datetime.fromisoformat(item["timestamp"]).strftime("%d.%m %H:%M")
        
        formatted += f"{command_emoji} {content}\n"
        formatted += f"   üïê {timestamp}\n\n"
    
    if len(history) > 10:
        formatted += f"... –∏ –µ—â–µ {len(history) - 10} –∑–∞–ø–∏—Å–µ–π"
    
    return formatted

def format_stats(stats: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    formatted = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**\n\n"
    
    formatted += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
    formatted += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('active_users', 0)}\n"
    formatted += f"üìù –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_requests', 0)}\n"
    formatted += f"‚≠ê –í—Å–µ–≥–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {stats.get('total_favorites', 0)}\n\n"
    
    if stats.get('created_at'):
        created_date = datetime.fromisoformat(stats['created_at']).strftime("%d.%m.%Y")
        formatted += f"üöÄ –ó–∞–ø—É—â–µ–Ω: {created_date}"
    
    return formatted

def format_prediction_result(prediction_data: Dict[str, Any], prediction_type: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    name = prediction_data.get("name", "").title()
    
    if prediction_type == "age":
        age = prediction_data.get("age")
        count = prediction_data.get("count", 0)
        return f"üéÇ **–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–ª—è {name}:**\n\n" \
               f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç: **{age} –ª–µ—Ç**\n" \
               f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {count} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ"
    
    elif prediction_type == "gender":
        gender = prediction_data.get("gender")
        gender_ru = "–ú—É–∂—Å–∫–æ–π" if gender == "male" else "–ñ–µ–Ω—Å–∫–∏–π"
        probability = prediction_data.get("probability", 0)
        count = prediction_data.get("count", 0)
        
        return f"üë´ **–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª–∞ –¥–ª—è {name}:**\n\n" \
               f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –ø–æ–ª: **{gender_ru}**\n" \
               f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability:.1%}\n" \
               f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {count} –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ"
    
    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"
