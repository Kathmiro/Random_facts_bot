from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from services.api_client import APIClient
from services.cache_service import cache
from storage.database import db
from keyboards.inline import get_add_to_favorites, get_main_menu, get_prediction_menu, get_content_with_back
from utils.formatters import format_prediction_result
from utils.logger import logger
from states.user_states import UserStates

router = Router()

async def handle_cat_fact(message_or_callback):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∞–∫—Ç–∞ –æ –∫–æ—Ç–∞—Ö"""
    user_id = message_or_callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    user = db.get_user(user_id)
    if not user:
        db.create_user(
            user_id=user_id,
            username=message_or_callback.from_user.username,
            first_name=message_or_callback.from_user.first_name
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_fact = cache.get("catfact_recent")
    if cached_fact:
        fact = cached_fact
        logger.info("Cat fact served from cache")
    else:
        async with APIClient() as client:
            fact = await client.get_cat_fact()
        
        if fact:
            cache.set("catfact_recent", fact)
        else:
            if isinstance(message_or_callback, Message):
                await message_or_callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç –æ –∫–æ—Ç–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                await message_or_callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç –æ –∫–æ—Ç–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    from routers.handlers.favorites_handlers import save_last_content
    save_last_content(user_id, fact)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    db.add_to_history(user_id, "catfact", fact)
    
    response_text = f"üê± **–§–∞–∫—Ç –æ –∫–æ—Ç–∞—Ö:**\n\n{fact}"
    keyboard = get_content_with_back("catfact")
    
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(response_text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message_or_callback.message.edit_text(response_text, reply_markup=keyboard, parse_mode="Markdown")

async def handle_random_fact(message_or_callback):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞"""
    user_id = message_or_callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    user = db.get_user(user_id)
    if not user:
        db.create_user(
            user_id=user_id,
            username=message_or_callback.from_user.username,
            first_name=message_or_callback.from_user.first_name
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_fact = cache.get("randomfact_recent")
    if cached_fact:
        fact = cached_fact
        logger.info("Random fact served from cache")
    else:
        async with APIClient() as client:
            fact = await client.get_random_fact()
        
        if fact:
            cache.set("randomfact_recent", fact)
        else:
            if isinstance(message_or_callback, Message):
                await message_or_callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                await message_or_callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    from routers.handlers.favorites_handlers import save_last_content
    save_last_content(user_id, fact)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    db.add_to_history(user_id, "randomfact", fact)
    
    response_text = f"üé≤ **–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç:**\n\n{fact}"
    keyboard = get_content_with_back("randomfact")
    
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(response_text, reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message_or_callback.message.edit_text(response_text, reply_markup=keyboard, parse_mode="Markdown")

@router.callback_query(F.data == "catfact")
async def catfact_callback(callback: CallbackQuery):
    """Callback –¥–ª—è —Ñ–∞–∫—Ç–∞ –æ –∫–æ—Ç–∞—Ö"""
    await handle_cat_fact(callback)
    await callback.answer()

@router.callback_query(F.data == "randomfact")
async def randomfact_callback(callback: CallbackQuery):
    """Callback –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞"""
    await handle_random_fact(callback)
    await callback.answer()

@router.callback_query(F.data == "prediction")
async def prediction_callback(callback: CallbackQuery):
    """Callback –¥–ª—è –º–µ–Ω—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    await callback.message.edit_text(
        "üîÆ **–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:",
        reply_markup=get_prediction_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("predict_"))
async def handle_prediction_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    prediction_type = callback.data.split("_")[1]  # age –∏–ª–∏ gender
    
    await state.set_state(UserStates.waiting_for_name_prediction)
    await state.update_data(prediction_type=prediction_type)
    
    prediction_text = "–≤–æ–∑—Ä–∞—Å—Ç–∞" if prediction_type == "age" else "–ø–æ–ª–∞"
    
    await callback.message.edit_text(
        f"üîÆ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è {prediction_text}:",
        reply_markup=get_main_menu()
    )
    
    await callback.answer(f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è {prediction_text}")

async def handle_name_prediction(message: Message, prediction_type: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    if not name or len(name) > 50:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cache_key = f"{prediction_type}_{name.lower()}"
    cached_result = cache.get(cache_key)
    
    if cached_result:
        result = cached_result
        logger.info(f"Prediction {prediction_type} for {name} served from cache")
    else:
        async with APIClient() as client:
            if prediction_type == "age":
                result = await client.get_age_prediction(name)
            else:
                result = await client.get_gender_prediction(name)
        
        if result:
            cache.set(cache_key, result)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    response_text = format_prediction_result(result, prediction_type)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    from routers.handlers.favorites_handlers import save_last_content
    save_last_content(user_id, response_text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    db.add_to_history(user_id, "prediction", response_text)
    
    keyboard = get_content_with_back("prediction")
    await message.answer(response_text, reply_markup=keyboard, parse_mode="Markdown")