from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from storage.database import db
from keyboards.inline import get_favorites_menu, get_main_menu, get_back_button
from keyboards.builders import build_favorites_list, build_remove_favorites_list
from utils.formatters import format_favorites
from states.user_states import UserStates
from utils.logger import logger

router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
last_content = {}

@router.callback_query(F.data == "favorites")
async def favorites_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã–º"""
    await callback.message.edit_text(
        "‚≠ê **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_favorites_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "show_favorites")
async def show_favorites(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    favorites = user.get("favorites", [])
    
    if not favorites:
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ‚≠ê –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤, —à—É—Ç–æ–∫ –∏–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π!",
            reply_markup=get_back_button()
        )
    else:
        keyboard = build_favorites_list(favorites)
        await callback.message.edit_text(
            "‚≠ê **–í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:**\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("view_favorite:"))
async def view_favorite(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"""
    try:
        favorite_index = int(callback.data.split(":")[1])
        user = db.get_user(callback.from_user.id)
        
        if not user or favorite_index >= len(user.get("favorites", [])):
            await callback.answer("‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        favorite = user["favorites"][favorite_index]
        content = favorite["content"]
        type_emoji = {
            "catfact": "üê±",
            "joke": "üòÑ", 
            "randomfact": "üé≤",
            "prediction": "üîÆ"
        }.get(favorite["type"], "üìù")
        
        response_text = f"{type_emoji} **–ò–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:**\n\n{content}"
        
        await callback.message.edit_text(
            response_text,
            reply_markup=get_back_button(),
            parse_mode="Markdown"
        )
        
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞")
    
    await callback.answer()

@router.callback_query(F.data == "remove_favorite")
async def remove_favorite_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    user = db.get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    favorites = user.get("favorites", [])
    
    if not favorites:
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
            reply_markup=get_back_button()
        )
    else:
        keyboard = build_remove_favorites_list(favorites)
        await callback.message.edit_text(
            "‚ùå **–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("delete_favorite:"))
async def delete_favorite(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    try:
        favorite_index = int(callback.data.split(":")[1])
        user_id = callback.from_user.id
        
        removed_item = db.remove_from_favorites(user_id, favorite_index)
        
        if removed_item:
            await callback.message.edit_text(
                "‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                reply_markup=get_favorites_menu()
            )
            logger.info(f"User {user_id} removed item from favorites")
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç",
                reply_markup=get_favorites_menu()
            )
            
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞")
    
    await callback.answer()

@router.callback_query(F.data.startswith("add_favorite:"))
async def add_to_favorites(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    content_type = callback.data.split(":")[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in last_content:
        await callback.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    content = last_content[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    user = db.get_user(user_id)
    if not user:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        db.create_user(
            user_id=user_id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name
        )
    
    success = db.add_to_favorites(user_id, content, content_type)
    
    if success:
        await callback.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=True)
        logger.info(f"User {user_id} added {content_type} to favorites")
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üé≤ **RandomFactsBot**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –¥—Ä—É–≥–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤)
def save_last_content(user_id: int, content: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    last_content[user_id] = content